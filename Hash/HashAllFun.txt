// âœ… MASTER TABLE: JAVA HASH COLLECTIONS â€” DETAILED PER COLLECTION AND METHOD
// Table Format: Collection | Explanation | Declaration | Method / Return / Purpose

// âœ… Java Hash Collections â€” Summary Theory (Concise & Point-wise)




// ðŸ”¹ HashSet
// - Backed internally by HashMap (only keys stored).
// - Stores unique elements, no duplicates allowed.
// - No specific order (unordered).
// - Allows one null element.

|--------------------------|----------------------------------------------------------|---------------------------------------------------------------|--------------------------------------------------------|
| Concept                  | Explanation                                              | Declaration                                                   | Return / Purpose                                       |
|--------------------------|----------------------------------------------------------|---------------------------------------------------------------|--------------------------------------------------------|
| âœ…HashSet<E>            || Unordered unique elements                                | HashSet<E> set = new HashSet<>()                              |                                                        |
| .add(e)                  | Adds element if not present                              | set.add(e)                                                    | Returns true if element added                          |
| .remove(e)               | Removes specified element                                | set.remove(e)                                                 | Returns true if element existed and removed            |
| .contains(e)             | Checks for element                                       | set.contains(e)                                               | Returns true if element exists                         |
| .size()                  | Number of elements                                       | set.size()                                                    | Returns int                                            |
| .clear()                 | Removes all elements                                     | set.clear()                                                   | Void                                                   |
| .isEmpty()               | Checks if set is empty                                   | set.isEmpty()                                                 | Returns true if set is empty                           |
| .iterator()              | Gets iterator                                            | set.iterator()                                                | Iterator<E>                                            |
|--------------------------|----------------------------------------------------------|---------------------------------------------------------------|--------------------------------------------------------|



// ðŸ”¹ LinkedHashSet
// - Extends HashSet with insertion order preserved.
// - Allows one null element.
// - Slightly slower than HashSet due to ordering overhead.

|--------------------------|----------------------------------------------------------|---------------------------------------------------------------|--------------------------------------------------------|
| Concept                  | Explanation                                              | Declaration                                                   | Return / Purpose                                       |
|--------------------------|----------------------------------------------------------|---------------------------------------------------------------|--------------------------------------------------------|
| âœ…LinkedHashSet<E>      || HashSet + insertion order maintained                     | LinkedHashSet<E> set = new LinkedHashSet<>()                  |                                                        |
| [same methods as HashSet]| Same methods as HashSet, preserves order                 |                                                               |                                                        |
|--------------------------|----------------------------------------------------------|---------------------------------------------------------------|--------------------------------------------------------|


// ðŸ”¹ HashMap
// - Stores key-value pairs with unique keys.
// - Allows one null key and multiple null values.
// - No guaranteed order of entries.
// - Not thread-safe; use ConcurrentHashMap if needed.
// - Fast lookup & insert (O(1) average time).

|-----------------------|----------------------------------------------------------|---------------------------------------------------------------|----------------------------------------------------------|
| Concept               | Explanation                                              | Declaration                                                   | Return                                                   |
|-----------------------|----------------------------------------------------------|---------------------------------------------------------------|----------------------------------------------------------|
| âœ…HashMap<K, V>      || Unordered key-value store                                | HashMap<K, V> map = new HashMap<>()                           | Allows null keys/values, not thread-safe                 |
| .put(k,v)             | Add/update entry                                         | map.put(key, value)                                           | Adds/updates and returns previous value (if any)         |
| .get(k)               | Get value                                                | map.get(k)                                                    | Value or null                                            |
| .remove(k)            | Remove entry                                             | map.remove(key)                                               | Removes the key and returns value                        |
| .containsKey(k)       | Checks if key exists                                     | map.containsKey(key)                                          | Returns true/false                                       |
| .keySet()             | All keys                                                 | map.keySet()                                                  | Set<K>                                                   |
| .values()             | All values                                               | map.values()                                                  | Collection<V>                                            |
| .entrySet()           | All key-value pairs                                      | map.entrySet()                                                | Set<Map.Entry<K,V>>                                      |
|-----------------------|----------------------------------------------------------|---------------------------------------------------------------|----------------------------------------------------------|



// ðŸ”¹ LinkedHashMap
// - Extends HashMap but maintains insertion order.
// - Allows one null key, multiple null values.
// - Useful when predictable iteration order is required.
// - Slightly slower than HashMap due to ordering logic.

|-----------------------|----------------------------------------------------------|---------------------------------------------------------------|----------------------------------------------------------|
| Concept               | Explanation                                              | Declaration                                                   | Return                                                   |
|-----------------------|----------------------------------------------------------|---------------------------------------------------------------|----------------------------------------------------------|
| âœ…LinkedHashMap      || Maintains insertion order                                | LinkedHashMap<K, V> map = new LinkedHashMap<>()               | Ordered by insertion                                     |
| .get(k)               | Get value for key                                        | map.get(key)                                                  | Returns value for key                                    |
| .remove(k)            | Remove key                                               | map.remove(key)                                               | Removes key-value pair                                   |
| .clear()              | Clear all entries                                        | map.clear()                                                   | Empties the map                                          |
|-----------------------|----------------------------------------------------------|---------------------------------------------------------------|----------------------------------------------------------|



// ðŸ”¹ Hashtable
// - Thread-safe version of HashMap (synchronized).
// - No null keys or null values allowed.
// - Slower due to synchronized methods.
// - Considered legacy; prefer ConcurrentHashMap in modern apps.

|-----------------------|----------------------------------------------------------|---------------------------------------------------------------|----------------------------------------------------------|
| Concept               | Explanation                                              | Declaration                                                   | Return                                                   |
|-----------------------|----------------------------------------------------------|---------------------------------------------------------------|----------------------------------------------------------|
| âœ…Hashtable          || Thread-safe legacy map                                   | Hashtable<K, V> map = new Hashtable<>()                       | Synchronized; null keys/values not allowed               |
| .put(k,v)             | Add entry                                                | map.put(k,v)                                                  | Adds entry                                               |
| .get(k)               | get                                                      | map.get(k)                                                    | Get value                                                |
| .containsKey(k)       | Check if key exists                                      | map.containsKey(k)                                            | true/false                                               |
| .elements()           | Get all values                                           | map.elements()                                                | Enumeration<V>                                           |
|-----------------------|----------------------------------------------------------|---------------------------------------------------------------|----------------------------------------------------------|


// ðŸ”¹ TreeMap
// - Stores sorted key-value pairs (Red-Black Tree).
// - Keys must implement Comparable or use Comparator.
// - Does not allow null keys (null values are allowed).
// - Slower than HashMap, but useful when sorted order is needed.

|----------------------------|----------------------------------------------------------|---------------------------------------------------------------|------------------------------------------------------|
| Concept                    | Explanation                                              | Declaration                                                   | Return                                               |
|----------------------------|----------------------------------------------------------|---------------------------------------------------------------|------------------------------------------------------|
| âœ…TreeMap<K, V>            | Sorted key-value pairs                                   | TreeMap<K, V> map = new TreeMap<>()                           | Keys are auto-sorted by natural/comparator order     |
| .firstKey()                | Get smallest key                                         | map.firstKey()                                                | Returns first (lowest) key                           |
| .lastKey()                 | Get largest key                                          | map.lastKey()                                                 | Returns last (highest) key                           |
| .headMap(), .tailMap()     | Partial views                                            | map.headMap(k), map.tailMap(k)                                | SortedMap<K,V>                                       |
|----------------------------|----------------------------------------------------------|---------------------------------------------------------------|------------------------------------------------------|



// ðŸ”¹ TreeSet
// - Stores sorted unique elements (based on TreeMap).
// - Elements must be Comparable or use Comparator.
// - Does not allow null elements.
// - Useful for maintaining sorted sets.

|-----------------------|----------------------------------------------------------|---------------------------------------------------------------|-----------------------------------------------------------|
| Concept               | Explanation                                              | Declaration                                                   | Return                                                    |
|-----------------------|----------------------------------------------------------|---------------------------------------------------------------|-----------------------------------------------------------|
| âœ…TreeSet<E>          | Sorted set (no duplicates)                               | TreeSet<E> set = new TreeSet<>()                              | Automatically sorted set                                  | 
| .first(), .last()     | First/last element                                       | set.first(), set.last()                                       | Smallest/largest element                                  |
| .add(e), .remove(e)   | Add/remove element                                       | set.add(e), set.remove(e)                                     | Standard set operations                                   |
| .subSet()             | Get range view                                           | set.subSet(start, end)                                        | Subset between values                                     |
|-----------------------|----------------------------------------------------------|---------------------------------------------------------------|-----------------------------------------------------------|



// ðŸ”¹ ConcurrentHashMap
// - Thread-safe and high-performance map.
// - Allows concurrent read/write without locking entire map.
// - No null keys or null values allowed.
// - Ideal for multithreaded environments.

|-----------------------|----------------------------------------------------------|---------------------------------------------------------------|----------------------------------------------------------|
| Concept               | Explanation                                              | Declaration                                                   | Return                                                   |
|-----------------------|----------------------------------------------------------|---------------------------------------------------------------|----------------------------------------------------------|
| âœ…ConcurrentHashMap   | Thread-safe for concurrent threads                       | ConcurrentHashMap<K, V> map = new ConcurrentHashMap<>()       | No sync needed; supports parallel reads/writes           |
| .putIfAbsent(k,v)     | Adds only if key not present                             | map.putIfAbsent(k,v)                                          | Adds entry only if key is absent                         |
| .forEach()            | Iterate thread-safe / Thread-safe traversal              | map.forEach(...)                                              | Safely iterate / Iterate all pairs                       |
|-----------------------|----------------------------------------------------------|---------------------------------------------------------------|----------------------------------------------------------|



// ðŸ”¹ WeakHashMap
// - Keys are weakly referenced (eligible for GC).
// - Automatically removes entries when keys are garbage collected.
// - Used for caching, memory-sensitive maps.
// - Not thread-safe.

|-----------------------|----------------------------------------------------------|---------------------------------------------------------------|----------------------------------------------------------|
| Concept               | Explanation                                              | Declaration                                                   | Return                                                   |
|-----------------------|----------------------------------------------------------|---------------------------------------------------------------|----------------------------------------------------------|
| âœ…WeakHashMap         | Automatically removes entry when key GC'd                | WeakHashMap<Object, V> map = new WeakHashMap<>()              | Keys are weakly referenced                               |
| .put()                | Add weak key                                             | map.put(key, value)                                           | Acts like HashMap, but keys may be GC'd                  |
| .get()                | access entries                                           | map.get(k)                                                    | Like HashMap, but keys GCâ€™d                              |
| GC + null key         | GC removes entry                                         | System.gc(), key=null                                         | After GC, removed                                        |
|-----------------------|----------------------------------------------------------|---------------------------------------------------------------|----------------------------------------------------------|



// ðŸ”¹ EnumMap
// - Specialized map for enum keys only.
// - Fastest Map for enums (uses internal array).
// - Maintains natural order of enum constants.
// - Does not allow null keys; values can be null.

|-----------------------|----------------------------------------------------------|---------------------------------------------------------------|----------------------------------------------------------|
| Concept               | Explanation                                              | Declaration                                                   | Return                                                   |
|-----------------------|----------------------------------------------------------|---------------------------------------------------------------|----------------------------------------------------------|
| âœ…EnumMap<Enum, V>    | Optimized map for enum keys                              | EnumMap<EnumType, V> map = new EnumMap<>(EnumType.class)      | High performance and type-safe for enums                 |
| .put()                | Add enum key mapping                                     | map.put(EnumValue, value)                                     | Adds value for enum key                                  |
| .get()                | get value for enum key                                   | map.get(EnumKey)                                              | Standard enum mapping                                    |
| .keySet()             | All enum keys                                            | map.keySet()                                                  | Set<Enum>                                                |
|-----------------------|----------------------------------------------------------|---------------------------------------------------------------|----------------------------------------------------------|



|--------------------------|----------------------------------------------------------|---------------------------------------------------------------|--------------------------------------------------------|
| Concept                  | Explanation                                              | Declaration                                                   | Return / Purpose                                       |
|--------------------------|----------------------------------------------------------|---------------------------------------------------------------|--------------------------------------------------------|
| âœ…Iterator<E>            | Loops over any collection                                | Iterator<E> it = collection.iterator()                        | Use with Set/Map views                                 |       
| .hasNext(), .next()      | Traverse elements                                        | it.hasNext(), it.next()                                       | Access elements one-by-one                             |
| .remove()                | Remove current element safely                            | it.remove()                                                   | During iteration                                       |
|--------------------------|----------------------------------------------------------|---------------------------------------------------------------|--------------------------------------------------------|

